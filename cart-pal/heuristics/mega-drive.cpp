struct MegaDriveCartridge {
  MegaDriveCartridge(string location, uint8_t* data, uint size);

  string manifest;

//private:
  struct Information {
  } information;
};

MegaDriveCartridge::MegaDriveCartridge(string location, uint8_t* data, uint size) {
  if(size < 0x200) return;

  static auto read16 = [&](uint addr) -> uint16_t {
    return data[addr + 0] << 8 | data[addr + 1] << 0;
  };

  static auto read24 = [&](uint addr) -> uint32_t {
    return data[addr + 0] << 16 | data[addr + 1] << 8 | data[addr + 2] << 0;
  };

  static auto read32 = [&](uint addr) -> uint32_t {
    return read16(addr + 0) << 16 | read16(addr + 2) << 0;
  };

  uint romSize = size;

  string ramMode = "none";

  uint32_t ramFrom = read32(0x01b4);
  uint32_t ramTo = read32(0x01b8);

  if(!(ramFrom & 1) && !(ramTo & 1)) ramMode = "hi";
  if( (ramFrom & 1) &&  (ramTo & 1)) ramMode = "lo";
  if(!(ramFrom & 1) &&  (ramTo & 1)) ramMode = "word";
  if(data[0x01b0] != 'R' || data[0x01b1] != 'A') ramMode = "none";

  uint32_t ramSize = ramTo - ramFrom + 1;
  if(ramMode == "hi") ramSize = (ramTo >> 1) - (ramFrom >> 1) + 1;
  if(ramMode == "lo") ramSize = (ramTo >> 1) - (ramFrom >> 1) + 1;
  if(ramMode == "word") ramSize = ramTo - ramFrom + 1;
  if(ramMode != "none") ramSize = bit::round(min(0x20000, ramSize));
  if(ramMode == "none") ramSize = 0;

  bool lockon = false;
  uint32_t upmemFrom = 0;
  uint32_t upmemTo = 0;

  if(data[0x01e0] == 'R' && data[0x01e1] == 'O') {
    lockon = true;
    upmemFrom = read24(0x01e4);
    upmemTo = read24(0x01e7);
  }

  uint32_t upmemSize = lockon ? upmemTo - upmemFrom + 1 : 0;
  romSize -= upmemSize;

  string_vector regions;
  string region = slice((const char*)&data[0x1f0], 0, 16).trimRight(" ");
  if(!regions) {
    if(region == "JAPAN" ) regions.append("ntsc-j");
    if(region == "EUROPE") regions.append("pal");
  }
  if(!regions) {
    if(region.find("J")) regions.append("ntsc-j");
    if(region.find("U")) regions.append("ntsc-u");
    if(region.find("E")) regions.append("pal");
    if(region.find("W")) regions.append("ntsc-j", "ntsc-u", "pal");
  }
  if(!regions && region.size() == 1) {
    uint8_t field = region.hex();
    if(field & 0x01) regions.append("ntsc-j");
    if(field & 0x04) regions.append("ntsc-u");
    if(field & 0x08) regions.append("pal");
  }
  if(!regions) {
    regions.append("ntsc-j");
  }

  manifest.append("board region=", regions.left(), "\n");
  manifest.append("  rom name=program.rom size=0x", hex(romSize), "\n");
  if(ramSize && ramMode != "none")
  manifest.append("  ram name=save.ram size=0x", hex(ramSize), " offset=0x", hex(ramFrom), " mode=", ramMode, "\n");
  if(lockon)
  manifest.append("  lock-on\n");
  if(upmemSize)
  manifest.append("    rom name=upmem.rom size=0x", hex(upmemSize), "\n");
  manifest.append("\n");
  manifest.append("information\n");
  manifest.append("  title: ", Location::prefix(location), "\n");
  manifest.append("\n");
  manifest.append("note: heuristically generated by icarus\n");
}
