#include <ms/ms.hpp>

namespace MasterSystem {

Bus bus;

auto Bus::read(uint16 addr) -> uint8 {
  if(addr < 0xc000 || disableRAM) return cartridge.read(addr);
  return ram[addr & ramMask];
}

auto Bus::write(uint16 addr, uint8 data) -> void {
  if(addr < 0xc000 || disableRAM) return cartridge.write(addr, data);
  ram[addr & ramMask] = data;
}

auto Bus::in(uint8 addr) -> uint8 {
  switch(addr) {

  case 0x00: case 0x02: case 0x04:
    //Gear to Gear Cable
    if(system.model() == Model::GameGear) return 0x00;
  case 0x06:
  case 0x08: case 0x0a: case 0x0c: case 0x0e:
  case 0x10: case 0x12: case 0x14: case 0x16:
  case 0x18: case 0x1a: case 0x1c: case 0x1e:
  case 0x20: case 0x22: case 0x24: case 0x26:
  case 0x28: case 0x2a: case 0x2c: case 0x2e:
  case 0x30: case 0x32: case 0x34: case 0x36:
  case 0x38: case 0x3a: case 0x3c: case 0x3e: { //port $3e
    uint8 data = 0x00;
    data.bit(2) = disableIO;
    data.bit(3) = disableBIOS;
    data.bit(4) = disableRAM;
    data.bit(5) = disableMyCard;
    data.bit(6) = disableCartridge;
    data.bit(7) = disableExpansion;
    return data;
  }

  case 0x01: case 0x03: case 0x05:
    //Gear to Gear Cable
    if(system.model() == Model::GameGear) return 0x00;
  case 0x07:
  case 0x09: case 0x0b: case 0x0d: case 0x0f:
  case 0x11: case 0x13: case 0x15: case 0x17:
  case 0x19: case 0x1b: case 0x1d: case 0x1f:
  case 0x21: case 0x23: case 0x25: case 0x27:
  case 0x29: case 0x2b: case 0x2d: case 0x2f:
  case 0x31: case 0x33: case 0x35: case 0x37:
  case 0x39: case 0x3b: case 0x3d: case 0x3f: { //port $3f
    return 0x00;
  }

  case 0x40: case 0x41: case 0x42: case 0x43:
  case 0x44: case 0x45: case 0x46: case 0x47:
  case 0x48: case 0x49: case 0x4a: case 0x4b:
  case 0x4c: case 0x4d: case 0x4e: case 0x4f:
  case 0x50: case 0x51: case 0x52: case 0x53:
  case 0x54: case 0x55: case 0x56: case 0x57:
  case 0x58: case 0x59: case 0x5a: case 0x5b:
  case 0x5c: case 0x5d: case 0x5e: case 0x5f:
  case 0x60: case 0x61: case 0x62: case 0x63:
  case 0x64: case 0x65: case 0x66: case 0x67:
  case 0x68: case 0x69: case 0x6a: case 0x6b:
  case 0x6c: case 0x6d: case 0x6e: case 0x6f:
  case 0x70: case 0x71: case 0x72: case 0x73:
  case 0x74: case 0x75: case 0x76: case 0x77:
  case 0x78: case 0x79: case 0x7a: case 0x7b:
  case 0x7c: case 0x7d: case 0x7e: case 0x7f:
  case 0x80: case 0x81: case 0x82: case 0x83:
  case 0x84: case 0x85: case 0x86: case 0x87:
  case 0x88: case 0x89: case 0x8a: case 0x8b:
  case 0x8c: case 0x8d: case 0x8e: case 0x8f:
  case 0x90: case 0x91: case 0x92: case 0x93:
  case 0x94: case 0x95: case 0x96: case 0x97:
  case 0x98: case 0x99: case 0x9a: case 0x9b:
  case 0x9c: case 0x9d: case 0x9e: case 0x9f:
  case 0xa0: case 0xa1: case 0xa2: case 0xa3:
  case 0xa4: case 0xa5: case 0xa6: case 0xa7:
  case 0xa8: case 0xa9: case 0xaa: case 0xab:
  case 0xac: case 0xad: case 0xae: case 0xaf:
  case 0xb0: case 0xb1: case 0xb2: case 0xb3:
  case 0xb4: case 0xb5: case 0xb6: case 0xb7:
  case 0xb8: case 0xb9: case 0xba: case 0xbb:
  case 0xbc: case 0xbd: case 0xbe: case 0xbf: { //port $7e, $7f, $be, and $bf
    return vdp.in(addr);
  }

  case 0xc2: case 0xc4: case 0xc6:
  case 0xc8: case 0xca: case 0xcc: case 0xce:
  case 0xd0: case 0xd2: case 0xd4: case 0xd6:
  case 0xd8: case 0xda: case 0xde:
  case 0xe0: case 0xe2: case 0xe4: case 0xe6:
  case 0xe8: case 0xea: case 0xec: case 0xee:
  case 0xf0: case 0xf2: case 0xf4: case 0xf6:
  case 0xf8: case 0xfa: case 0xfc: case 0xfe:
    if(system.model() == Model::GameGear) return 0x00;
  case 0xc0: case 0xdc: { //port $dc
    uint7 data0 = MasterSystem::peripherals.controllerPort1->readData();
    uint7 data1 = MasterSystem::peripherals.controllerPort2->readData();
    uint8 data = 0x00;
    data.bits(0,5) = (uint)data0.bits(0,5);
    data.bits(6,7) = (uint)data1.bits(0,1);
    return data;
  }

  case 0xc3: case 0xc5: case 0xc7:
  case 0xc9: case 0xcb: case 0xcd: case 0xcf:
  case 0xd1: case 0xd3: case 0xd5: case 0xd7:
  case 0xd9: case 0xdb: case 0xdf:
  case 0xe1: case 0xe3: case 0xe5: case 0xe7:
  case 0xe9: case 0xeb: case 0xed: case 0xef:
  case 0xf1: case 0xf3: case 0xf5: case 0xf7:
  case 0xf9: case 0xfb: case 0xfd: case 0xff:
    if(system.model() == Model::GameGear) return 0x00;
  case 0xc1: case 0xdd: { //port $dd
    uint7 data0 = MasterSystem::peripherals.controllerPort1->readData();
    uint7 data1 = MasterSystem::peripherals.controllerPort2->readData();
    uint8 data = 0x00;
    data.bits(0,3) = (uint)data1.bits(2,5);
    data.bit (  4) = 1;  //reset button
    data.bit (  5) = 1;  //cartridge CONT pin
    data.bit (  6) = (bool)data0.bit (6);
    data.bit (  7) = (bool)data1.bit (6);
    return data;
  }

  }
  return 0x00;
}

auto Bus::out(uint8 addr, uint8 data) -> void {
  switch(addr) {

  case 0x00: case 0x02: case 0x04:
    //Gear to Gear Cable
    if(system.model() == Model::GameGear) return;
  case 0x06:
  case 0x08: case 0x0a: case 0x0c: case 0x0e:
  case 0x10: case 0x12: case 0x14: case 0x16:
  case 0x18: case 0x1a: case 0x1c: case 0x1e:
  case 0x20: case 0x22: case 0x24: case 0x26:
  case 0x28: case 0x2a: case 0x2c: case 0x2e:
  case 0x30: case 0x32: case 0x34: case 0x36:
  case 0x38: case 0x3a: case 0x3c: case 0x3e: {  //port $3e
    disableIO        = data.bit(2);
    disableBIOS      = data.bit(3);
    disableRAM       = data.bit(4);
    disableMyCard    = data.bit(5);
    disableCartridge = data.bit(6);
    disableExpansion = data.bit(7);
    break;
  }

  case 0x01: case 0x03: case 0x05:
    //Gear to Gear Cable
    if(system.model() == Model::GameGear) return;
  case 0x07:
  case 0x09: case 0x0b: case 0x0d: case 0x0f:
  case 0x11: case 0x13: case 0x15: case 0x17:
  case 0x19: case 0x1b: case 0x1d: case 0x1f:
  case 0x21: case 0x23: case 0x25: case 0x27:
  case 0x29: case 0x2b: case 0x2d: case 0x2f:
  case 0x31: case 0x33: case 0x35: case 0x37:
  case 0x39: case 0x3b: case 0x3d: case 0x3f: {  //port $3f
    //Writing to TH lines has no effect in Japanese systems.
    uint7 control1;
    uint7 control2;
    uint7 data1;
    uint7 data2;
    control1.bit(5) = data.bit(0);
    control1.bit(6) = data.bit(1);
    control2.bit(5) = data.bit(2);
    control2.bit(6) = data.bit(3);
    data1.bit(5) = data.bit(4);
    data1.bit(6) = data.bit(5);
    data2.bit(5) = data.bit(6);
    data2.bit(6) = data.bit(7);
    MasterSystem::peripherals.controllerPort1->writeControl(control1);
    MasterSystem::peripherals.controllerPort2->writeControl(control2);
    MasterSystem::peripherals.controllerPort1->writeData(data1);
    MasterSystem::peripherals.controllerPort2->writeData(data2);
    break;
  }

  case 0x40: case 0x41: case 0x42: case 0x43:
  case 0x44: case 0x45: case 0x46: case 0x47:
  case 0x48: case 0x49: case 0x4a: case 0x4b:
  case 0x4c: case 0x4d: case 0x4e: case 0x4f:
  case 0x50: case 0x51: case 0x52: case 0x53:
  case 0x54: case 0x55: case 0x56: case 0x57:
  case 0x58: case 0x59: case 0x5a: case 0x5b:
  case 0x5c: case 0x5d: case 0x5e: case 0x5f:
  case 0x60: case 0x61: case 0x62: case 0x63:
  case 0x64: case 0x65: case 0x66: case 0x67:
  case 0x68: case 0x69: case 0x6a: case 0x6b:
  case 0x6c: case 0x6d: case 0x6e: case 0x6f:
  case 0x70: case 0x71: case 0x72: case 0x73:
  case 0x74: case 0x75: case 0x76: case 0x77:
  case 0x78: case 0x79: case 0x7a: case 0x7b:
  case 0x7c: case 0x7d: case 0x7e: case 0x7f: {  //port $7f;
    psg.out(addr, data);
  }

  case 0x80: case 0x81: case 0x82: case 0x83:
  case 0x84: case 0x85: case 0x86: case 0x87:
  case 0x88: case 0x89: case 0x8a: case 0x8b:
  case 0x8c: case 0x8d: case 0x8e: case 0x8f:
  case 0x90: case 0x91: case 0x92: case 0x93:
  case 0x94: case 0x95: case 0x96: case 0x97:
  case 0x98: case 0x99: case 0x9a: case 0x9b:
  case 0x9c: case 0x9d: case 0x9e: case 0x9f:
  case 0xa0: case 0xa1: case 0xa2: case 0xa3:
  case 0xa4: case 0xa5: case 0xa6: case 0xa7:
  case 0xa8: case 0xa9: case 0xaa: case 0xab:
  case 0xac: case 0xad: case 0xae: case 0xaf:
  case 0xb0: case 0xb1: case 0xb2: case 0xb3:
  case 0xb4: case 0xb5: case 0xb6: case 0xb7:
  case 0xb8: case 0xb9: case 0xba: case 0xbb:
  case 0xbc: case 0xbd: case 0xbe: case 0xbf: {  //ports $be and $bf
    vdp.out(addr, data);
    break;
  }

  }
}

}
