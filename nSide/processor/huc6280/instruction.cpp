#define op(id, name, ...) case id: instruction_##name(__VA_ARGS__); return;
#define fp(name) &HuC6280::name

auto HuC6280::instruction() -> void {
  auto code = opcode();

  if(T) {
    T = 0;
    switch(code) {
    op(0x09, alu_memory, fp(ORA))
    op(0x29, alu_memory, fp(AND))
    op(0x49, alu_memory, fp(EOR))
    op(0x69, alu_memory, fp(ADC))
    }
  }

  switch(code) {
  op(0x01, alu_indirect, fp(ORA), X)
  op(0x02, Sbb, X, Y)
  op(0x05, alu_zeropage, fp(ORA))
  op(0x06, alu_zeropage, fp(ASL))
  op(0x08, PHP)
  op(0x09, alu_immediate, fp(ORA))
  op(0x0a, alu_implied, fp(ASL), A)
  op(0x0d, alu_absolute, fp(ORA))
  op(0x0e, alu_absolute, fp(ASL))
  op(0x10, bra, N == 0)
  op(0x11, alu_indirectY, fp(ORA))
  op(0x12, alu_indirect, fp(ORA))
  op(0x15, alu_zeropage, fp(ORA), X)
  op(0x16, alu_zeropage, fp(ASL), X)
  op(0x18, CLf, C)
  op(0x19, alu_absolute, fp(ORA), Y)
  op(0x1a, alu_implied, fp(INC), A)
  op(0x1d, alu_absolute, fp(ORA), X)
  op(0x1e, alu_absolute, fp(ASL), X)
  op(0x21, alu_indirect, fp(AND), X)
  op(0x22, Sbb, A, X)
  op(0x24, alu_zeropage, fp(BIT))
  op(0x25, alu_zeropage, fp(AND))
  op(0x26, alu_zeropage, fp(ROL))
  op(0x28, PLP)
  op(0x29, alu_immediate, fp(AND))
  op(0x2a, alu_implied, fp(ROL), A)
  op(0x2c, alu_absolute, fp(BIT))
  op(0x2d, alu_absolute, fp(AND))
  op(0x2e, alu_absolute, fp(ROL))
  op(0x30, bra, N == 1)
  op(0x31, alu_indirectY, fp(AND))
  op(0x32, alu_indirect, fp(AND))
  op(0x34, alu_zeropage, fp(BIT), X)
  op(0x35, alu_zeropage, fp(AND), X)
  op(0x36, alu_zeropage, fp(ROL), X)
  op(0x38, SEf, C)
  op(0x39, alu_absolute, fp(AND), Y)
  op(0x3a, alu_implied, fp(DEC), A)
  op(0x3c, alu_absolute, fp(BIT), X)
  op(0x3d, alu_absolute, fp(AND), X)
  op(0x3e, alu_absolute, fp(ROL), X)
  op(0x41, alu_indirect, fp(EOR), X)
  op(0x42, Sbb, A, Y)
  op(0x43, TMA)
  op(0x45, alu_zeropage, fp(EOR))
  op(0x46, alu_zeropage, fp(LSR))
  op(0x48, PHb, A)
  op(0x49, alu_immediate, fp(EOR))
  op(0x4a, alu_implied, fp(LSR), A)
  op(0x4d, alu_absolute, fp(EOR))
  op(0x4e, alu_absolute, fp(LSR))
  op(0x50, bra, V == 0)
  op(0x51, alu_indirectY, fp(EOR))
  op(0x52, alu_indirect, fp(EOR))
  op(0x53, TAM)
  op(0x54, CSL)
  op(0x55, alu_zeropage, fp(EOR), X)
  op(0x56, alu_zeropage, fp(LSR), X)
  op(0x58, CLf, I)
  op(0x59, alu_absolute, fp(EOR), Y)
  op(0x5a, PHb, Y)
  op(0x5d, alu_absolute, fp(EOR), X)
  op(0x5e, alu_absolute, fp(LSR), X)
  op(0x61, alu_indirect, fp(ADC), X)
  op(0x62, CLb, A)
  op(0x64, STb_zeropage, 0)
  op(0x65, alu_zeropage, fp(ADC))
  op(0x66, alu_zeropage, fp(ROR))
  op(0x68, PLb, A)
  op(0x69, alu_immediate, fp(ADC))
  op(0x6a, alu_implied, fp(ROR), A)
  op(0x6d, alu_absolute, fp(ADC))
  op(0x6e, alu_absolute, fp(ROR))
  op(0x70, bra, V == 1)
  op(0x71, alu_indirectY, fp(ADC))
  op(0x72, alu_indirect, fp(ADC))
  op(0x74, STb_zeropage, 0, X)
  op(0x75, alu_zeropage, fp(ADC), X)
  op(0x76, alu_zeropage, fp(ROR), X)
  op(0x78, SEf, I)
  op(0x79, alu_absolute, fp(ADC), Y)
  op(0x7a, PLb, Y)
  op(0x7d, alu_absolute, fp(ADC), X)
  op(0x7e, alu_absolute, fp(ROR), X)
  op(0x80, bra, 1)
  op(0x81, STA_indirect, X)
  op(0x82, CLb, X)
  op(0x84, STb_zeropage, Y)
  op(0x85, STb_zeropage, A)
  op(0x86, STb_zeropage, X)
  op(0x88, alu_implied, fp(DEC), Y)
  op(0x89, alu_immediate, fp(BIT))
  op(0x8a, Tbb, X, A)
  op(0x8c, STb_absolute, Y)
  op(0x8d, STb_absolute, A)
  op(0x8e, STb_absolute, X)
  op(0x90, bra, C == 0)
  op(0x91, STA_indirectY)
  op(0x92, STA_indirect)
  op(0x94, STb_zeropage, Y, X)
  op(0x95, STb_zeropage, A, X)
  op(0x96, STb_zeropage, X, Y)
  op(0x98, Tbb, Y, A)
  op(0x99, STb_absolute, A, Y)
  op(0x9a, TXS)
  op(0x9c, STb_absolute, 0)
  op(0x9d, STb_absolute, A, X)
  op(0x9e, STb_absolute, 0, X)
  op(0xa0, LDb_immediate, Y)
  op(0xa1, LDA_indirect, X)
  op(0xa2, LDb_immediate, X)
  op(0xa4, LDb_zeropage, Y)
  op(0xa5, LDb_zeropage, A)
  op(0xa6, LDb_zeropage, X)
  op(0xa8, Tbb, A, Y)
  op(0xa9, LDb_immediate, A)
  op(0xaa, Tbb, A, X)
  op(0xac, LDb_absolute, Y)
  op(0xad, LDb_absolute, A)
  op(0xae, LDb_absolute, X)
  op(0xb0, bra, C == 1)
  op(0xb1, LDA_indirectY)
  op(0xb2, LDA_indirect)
  op(0xb4, LDb_zeropage, Y, X)
  op(0xb5, LDb_zeropage, A, X)
  op(0xb6, LDb_zeropage, X, Y)
  op(0xb8, CLf, V)
  op(0xb9, LDb_absolute, A, Y)
  op(0xba, Tbb, S, X)
  op(0xbc, LDb_absolute, Y, X)
  op(0xbd, LDb_absolute, A, X)
  op(0xbe, LDb_absolute, X, Y)
  op(0xc0, alu_immediate, fp(CPY))
  op(0xc1, alu_indirect, fp(CMP), X)
  op(0xc2, CLb, Y)
  op(0xc5, alu_zeropage, fp(CMP))
  op(0xc6, alu_zeropage, fp(DEC))
  op(0xc8, alu_implied, fp(INC), Y)
  op(0xc9, alu_immediate, fp(CMP))
  op(0xca, alu_implied, fp(DEC), X)
  op(0xcd, alu_absolute, fp(CMP))
  op(0xce, alu_absolute, fp(DEC))
  op(0xd0, bra, Z == 0)
  op(0xd1, alu_indirectY, fp(CMP))
  op(0xd2, alu_indirect, fp(CMP))
  op(0xd4, CSH)
  op(0xd5, alu_zeropage, fp(CMP), X)
  op(0xd6, alu_zeropage, fp(DEC), X)
  op(0xd8, CLf, D)
  op(0xd9, alu_absolute, fp(CMP), Y)
  op(0xda, PHb, X)
  op(0xdd, alu_absolute, fp(CMP), X)
  op(0xde, alu_absolute, fp(DEC), X)
  op(0xe0, alu_immediate, fp(CPX))
  op(0xe1, alu_indirect, fp(SBC), X)
  op(0xe5, alu_zeropage, fp(SBC))
  op(0xe6, alu_zeropage, fp(INC))
  op(0xe8, alu_implied, fp(INC), X)
  op(0xe9, alu_immediate, fp(SBC))
  op(0xea, NOP)
  op(0xed, alu_absolute, fp(SBC))
  op(0xee, alu_absolute, fp(INC))
  op(0xf0, bra, Z == 1)
  op(0xf1, alu_indirectY, fp(SBC))
  op(0xf2, alu_indirect, fp(SBC))
  op(0xf4, SEf, T)
  op(0xf5, alu_zeropage, fp(SBC), X)
  op(0xf6, alu_zeropage, fp(INC), X)
  op(0xf8, SEf, D)
  op(0xf9, alu_absolute, fp(SBC), Y)
  op(0xfa, PLb, X)
  op(0xfd, alu_absolute, fp(SBC), X)
  op(0xfe, alu_absolute, fp(INC), X)
  }
}

#undef op
#undef fp
